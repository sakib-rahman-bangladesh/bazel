// Copyright 2018 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.devtools.build.lib.skyframe;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.devtools.build.lib.bazel.bzlmod.Module;
import com.google.devtools.build.lib.bazel.bzlmod.ModuleKey;
import com.google.devtools.build.lib.bazel.bzlmod.SelectionValue;
import com.google.devtools.build.lib.cmdline.LabelConstants;
import com.google.devtools.build.lib.cmdline.RepositoryName;
import com.google.devtools.build.lib.packages.BuildFileContainsErrorsException;
import com.google.devtools.build.lib.packages.Package;
import com.google.devtools.build.lib.rules.repository.RepositoryDelegatorFunction;
import com.google.devtools.build.skyframe.SkyFunction;
import com.google.devtools.build.skyframe.SkyFunctionException;
import com.google.devtools.build.skyframe.SkyKey;
import com.google.devtools.build.skyframe.SkyValue;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/** {@link SkyFunction} for {@link RepositoryMappingValue}s. */
public class RepositoryMappingFunction implements SkyFunction {

  @Nullable
  @Override
  public SkyValue compute(SkyKey skyKey, Environment env)
      throws SkyFunctionException, InterruptedException {
    RepositoryName repositoryName = (RepositoryName) skyKey.argument();

    if (Preconditions.checkNotNull(RepositoryDelegatorFunction.ENABLE_BZLMOD.get(env))) {
      SelectionValue selectionValue = (SelectionValue) env.getValue(SelectionValue.KEY);
      if (env.valuesMissing()) {
        return null;
      }

      Optional<ImmutableMap<RepositoryName, RepositoryName>> mapping =
          computeFromBzlmod(repositoryName, selectionValue);
      if (mapping.isPresent()) {
        return RepositoryMappingValue.withMapping(mapping.get());
      }
    }

    SkyKey externalPackageKey = PackageValue.key(LabelConstants.EXTERNAL_PACKAGE_IDENTIFIER);
    PackageValue externalPackageValue = (PackageValue) env.getValue(externalPackageKey);
    if (env.valuesMissing()) {
      return null;
    }

    return computeFromWorkspace(repositoryName, externalPackageValue);
  }

  /**
   * Calculate repo mappings for Bzlmod generated repository.
   *
   * <p>TODO(pcloudy): Currently we only support Bazel modules without multiple version override.
   * Update this when implementing multiple version override and module rule.
   *
   * @return the repo mappings for the repo if it's generated by Bzlmod, otherwise return
   *     Optional.empty().
   */
  private Optional<ImmutableMap<RepositoryName, RepositoryName>> computeFromBzlmod(
      RepositoryName repositoryName, SelectionValue selectionValue) {
    String moduleName =
        repositoryName.isMain()
            ? selectionValue.getRootModuleName()
            : repositoryName.strippedName();
    return selectionValue.getDepGraph().entrySet().stream()
        .filter(entry -> entry.getKey().getName().equals(moduleName))
        .findFirst()
        .map(entry -> buildRepoMapping(entry.getValue(), selectionValue));
  }

  private ImmutableMap<RepositoryName, RepositoryName> buildRepoMapping(
      Module module, SelectionValue selectionValue) {
    ImmutableMap.Builder<RepositoryName, RepositoryName> repoMapping = ImmutableMap.builder();
    // In case of a repository refers to the main repository with @<main repo name>, we should
    // map it to the main repo identifier to avoid "fetching" the main repo.
    repoMapping.put(
        RepositoryName.createFromValidStrippedName(selectionValue.getRootModuleName()),
        RepositoryName.MAIN);
    // module.getDeps() contains a mapping of Bazel module dependencies from the
    // required repo name to the module key. Go through them to construct the repo mappings.
    for (Map.Entry<String, ModuleKey> dep : module.getDeps().entrySet()) {
      // We assume the canonical repo name is the module name for now.
      String expectedRepoName = dep.getKey();
      String canonicalRepoName = dep.getValue().getName();
      if (expectedRepoName.equals(canonicalRepoName)) {
        continue;
      }
      repoMapping.put(
          RepositoryName.createFromValidStrippedName(expectedRepoName),
          RepositoryName.createFromValidStrippedName(canonicalRepoName));
    }
    return repoMapping.build();
  }

  private SkyValue computeFromWorkspace(
      RepositoryName repositoryName, PackageValue externalPackageValue)
      throws RepositoryMappingFunctionException {
    Package externalPackage = externalPackageValue.getPackage();
    if (externalPackage.containsErrors()) {
      throw new RepositoryMappingFunctionException();
    }
    return RepositoryMappingValue.withMapping(externalPackage.getRepositoryMapping(repositoryName));
  }

  @Nullable
  @Override
  public String extractTag(SkyKey skyKey) {
    return null;
  }

  private static class RepositoryMappingFunctionException extends SkyFunctionException {
    RepositoryMappingFunctionException() {
      super(
          new BuildFileContainsErrorsException(LabelConstants.EXTERNAL_PACKAGE_IDENTIFIER),
          Transience.PERSISTENT);
    }
  }
}
